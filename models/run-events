#!/usr/bin/env python3

import argparse
import datetime
from collections import defaultdict, namedtuple
from itertools import chain, islice, repeat
import logging
import math
import os
import pickle
from random import choices
import signal
import subprocess
import sys
import tempfile

import h5py
import numpy as np
from scipy.ndimage import measurements

import freestream
import frzout


def run_cmd(*args):
    """
    Run and log a subprocess.

    """
    cmd = ' '.join(args)
    logging.info('running command: %s', cmd)

    try:
        proc = subprocess.run(
            cmd.split(), check=True,
            stdout=subprocess.PIPE, stderr=subprocess.STDOUT,
            universal_newlines=True
        )
    except subprocess.CalledProcessError as e:
        logging.error(
            'command failed with status %d:\n%s',
            e.returncode, e.output.strip('\n')
        )
        raise
    else:
        logging.debug(
            'command completed successfully:\n%s',
            proc.stdout.strip('\n')
        )
        return proc


class Parser(argparse.ArgumentParser):
    """
    ArgumentParser that parses files with 'key = value' lines.

    """
    def __init__(self, *args, fromfile_prefix_chars='@', **kwargs):
        super().__init__(
            *args, fromfile_prefix_chars=fromfile_prefix_chars, **kwargs
        )

    def convert_arg_line_to_args(self, arg_line):
        # split each line on = and prepend prefix chars to first arg so it is
        # parsed as a long option
        args = [i.strip() for i in arg_line.split('=', maxsplit=1)]
        args[0] = 2*self.prefix_chars[0] + args[0]
        return args


parser = Parser(
    usage=''.join('\n  %(prog)s ' + i for i in [
        '[options] <results_file>',
        'checkpoint <checkpoint_file>',
        '-h | --help',
    ]),
    description='''
Run relativistic heavy-ion collision events.

In the first form, run events according to the given options (below) and write
results to binary file <results_file>.

In the second form, run the event saved in <checkpoint_file>, previously
created by using the --checkpoint option and interrupting an event in progress.
''',
    formatter_class=argparse.RawDescriptionHelpFormatter
)


def parse_args_checkpoint():
    """
    Parse command line arguments according to the parser usage info.  Return a
    tuple (args, ic) where `args` is a normal argparse.Namespace and `ic` is
    either None or an np.array of the checkpointed initial condition.

    First, check for the special "checkpoint" form, and if found, load and
    return the args and checkpoint initial condition from the specified file.
    If not, let the parser object handle everything.

    This is a little hacky but it works fine.  Truth is, argparse can't do
    exactly what I want here.  I suppose `docopt` might be a better option, but
    it's not worth the effort to rewrite everything.

    """
    def usage():
        parser.print_usage(sys.stderr)
        sys.exit(2)

    if len(sys.argv) == 1:
        usage()

    if sys.argv[1] == 'checkpoint':
        if len(sys.argv) != 3:
            usage()

        path = sys.argv[2]

        try:
            with open(path, 'rb') as f:
                args, ic, trigger = pickle.load(f)
        except Exception as e:
            msg = '{}: {}'.format(type(e).__name__, e)
            if path not in msg:
                msg += ": '{}'".format(path)
            sys.exit(msg)

        # as a simple integrity check, require that the checkpoint file is
        # actually the file specified in the checkpointed args
        if os.path.abspath(path) != args.checkpoint:
            sys.exit(
                "checkpoint file path '{}' does not match saved path '{}'"
                .format(path, args.checkpoint)
            )

        return args, (ic, trigger)

    return parser.parse_args(), None


parser.add_argument(
    'ic', type=os.path.abspath,
    help=argparse.SUPPRESS
)
parser.add_argument(
    'results', type=os.path.abspath,
    help=argparse.SUPPRESS
)
parser.add_argument(
    '--buffering', type=int, default=0, metavar='INT',
    help='results file buffer size in bytes (default: no buffering)'
)
parser.add_argument(
    '--nevents', type=int, metavar='INT',
    help='number of events to run (default: run until interrupted)'
)
parser.add_argument(
    '--rankvar', metavar='VAR',
    help='environment variable containing process rank'
)
parser.add_argument(
    '--rankfmt', metavar='FMT',
    help='format string for rank integer'
)
parser.add_argument(
    '--tmpdir', type=os.path.abspath, metavar='PATH',
    help='temporary directory (default: {})'.format(tempfile.gettempdir())
)
parser.add_argument(
    '--checkpoint', type=os.path.abspath, metavar='PATH',
    help='checkpoint file [pickle format]'
)
parser.add_argument(
    '--logfile', type=os.path.abspath, metavar='PATH',
    help='log file (default: stdout)'
)
parser.add_argument(
    '--loglevel', choices={'debug', 'info', 'warning', 'error', 'critical'},
    default='info',
    help='log level (default: %(default)s)'
)
parser.add_argument(
    '--projectiles', type=str, default=('Pb Pb'),
    help='collision system projectiles (default: %(default)s)'
)
parser.add_argument(
    '--grid-scale', type=float, default=.2,
    help='grid scale (default: %(default)s)'
)
parser.add_argument(
    '--parton-width', type=float, default=.5,
    help='parton width (default: %(default)s fm)'
)
parser.add_argument(
    '--trento-args', default='', metavar='ARGS',
    help="arguments passed to trento (default: '%(default)s')"
)
parser.add_argument(
    '--tau-fs', type=float, default=.5, metavar='FLOAT',
    help='free streaming time [fm] (default: %(default)s fm)'
)
parser.add_argument(
    '--hydro-args', default='', metavar='ARGS',
    help='arguments passed to osu-hydro (default: empty)'
)
parser.add_argument(
    '--Tswitch', type=float, default=.150, metavar='FLOAT',
    help='particlization temperature [GeV] (default: %(default).3f GeV)'
)


class StopEvent(Exception):
    """ Raise to end an event early. """


def run_events(args, results_file, checkpoint_ic=None):
    """
    Run events as determined by user input:

        - Read options from `args`, as returned by `parser.parse_args()`.
        - Write results to binary file object `results_file`.
        - If `checkpoint_ic` is given, run only that IC.

    Return True if at least one event completed successfully, otherwise False.

    """
    trento_event = np.load(args.ic)
    grid_step = args.grid_scale * args.parton_width
    grid_n = set(trento_event.shape).pop()
    grid_max = 0.5*grid_n*grid_step

    initial_conditions = [trento_event]

    logging.info(
        'grid step = %.6f fm, n = %d, max = %.6f fm',
        grid_step, grid_n, grid_max
    )

    # create sampler HRG object (to be reused for all events)
    hrg_kwargs = dict(species='urqmd', res_width=True)
    hrg = frzout.HRG(args.Tswitch, **hrg_kwargs)

    # append switching energy density to hydro arguments
    eswitch = hrg.energy_density()
    hydro_args = [args.hydro_args, 'edec={}'.format(eswitch)]

    def run_hydro(fs, event_size, dt_ratio=.25):
        """
        Run the initial condition contained in FreeStreamer object `fs` through
        osu-hydro on a grid with approximate physical size `event_size` [fm].
        Return a dict of freeze-out surface data suitable for passing directly
        to frzout.Surface.

        Initial condition arrays are cropped or padded as necessary.

        `dt_ratio` sets the timestep as a fraction of the spatial step
        (dt = dt_ratio * dxy).  The SHASTA algorithm requires dt_ratio < 1/2.

        """
        dxy = grid_step
        ls = math.ceil(event_size/dxy)  # the osu-hydro "ls" parameter
        n = 2*ls + 1  # actual number of grid cells

        for fmt, f, arglist in [
                ('ed', fs.energy_density, [()]),
                ('u{}', fs.flow_velocity, [(1,), (2,)]),
                ('pi{}{}', fs.shear_tensor, [(1, 1), (1, 2), (2, 2)]),
        ]:
            for a in arglist:
                X = f(*a)

                diff = X.shape[0] - n
                start = int(abs(diff)/2)

                if diff > 0:
                    # original grid is larger -> cut out middle square
                    s = slice(start, start + n)
                    X = X[s, s]
                elif diff < 0:
                    # original grid is smaller
                    #  -> create new array and place original grid in middle
                    Xn = np.zeros((n, n))
                    s = slice(start, start + X.shape[0])
                    Xn[s, s] = X
                    X = Xn

                X.tofile(fmt.format(*a) + '.dat')

        dt = dxy*dt_ratio

        run_cmd(
            'osu-hydro',
            't0={} dt={} dxy={} nls={}'.format(args.tau_fs, dt, dxy, ls), *hydro_args
        )

        surface = np.fromfile('surface.dat', dtype='f8').reshape(-1, 16)

        # end event if the surface is empty -- this occurs in ultra-peripheral
        # events where the initial condition doesn't exceed Tswitch
        if surface.size == 0:
            raise StopEvent('empty surface')

        # surface columns:
        #   0    1  2  3         4         5         6    7
        #   tau  x  y  dsigma_t  dsigma_x  dsigma_y  v_x  v_y
        #   8     9     10    11    12    13    14    15
        #   pitt  pitx  pity  pixx  pixy  piyy  pizz  Pi

        # pack surface data into a dict suitable for passing to frzout.Surface
        surface = dict(
            zip(['x', 'sigma', 'v'], np.hsplit(surface, [3, 6, 8])),
            pi=dict(zip(['xx', 'xy', 'yy'], surface.T[11:14])),
            Pi=surface.T[15]
        )

        # save surface file
        pickle.dump(surface, results_file)

        return surface

    # fully specify numeric data types, including endianness and size, to
    # ensure consistency across all machines
    float_t = '<f8'
    int_t = '<i8'

    def run_single_event(ic):
        """
        Run the initial condition event contained in HDF5 dataset object `ic`
        and save observables to `results`.

        """
        entropy = ic.sum() * grid_step**2
        logging.info('initial entropy = {0:.3f}'.format(entropy))

        assert all(n == grid_n for n in ic.shape)

        logging.info(
            'free streaming initial condition for %.3f fm',
            args.tau_fs
        )
        fs = freestream.FreeStreamer(ic, grid_max, args.tau_fs)

        # now run normal event with size set to the max radius
        # and create sampler surface object
        surface = frzout.Surface(**run_hydro(fs, event_size=3*grid_max), ymax=2)
        logging.info('%d freeze-out cells', len(surface))

        minsamples, maxsamples = 10, 10**5  # reasonable range for nsamples
        minparts = 10**5  # min number of particles to sample
        nparts = 0  # for tracking total number of sampled particles

        logging.info('sampling surface with frzout')

        # sample particles and write to file
        with open('particles_in.dat', 'w') as f:
            for nsamples in range(1, maxsamples + 1):
                parts = frzout.sample(surface, hrg)
                if parts.size == 0:
                    continue
                nparts += parts.size
                print('#', parts.size, file=f)
                for p in parts:
                    print(p['ID'], *p['x'], *p['p'], file=f)
                if nparts >= minparts and nsamples >= minsamples:
                    break

        logging.info('produced %d particles in %d samples', nparts, nsamples)

        if nparts == 0:
            raise StopEvent('no particles produced')

        # hadronic afterburner
        run_cmd('afterburner particles_in.dat particles_out.dat')

        # read final particle data
        with open('particles_out.dat', 'rb') as f:
            parts = np.fromiter(
                (tuple(l.split()) for l in f if not l.startswith(b'#')),
                dtype=[
                    ('ID',     int),
                    ('charge', int),
                    ('pT',   float),
                    ('ET',   float),
                    ('mT',   float),
                    ('phi',  float),
                    ('y',    float),
                    ('eta',  float),
                ]
            )

        """
        dNch/deta

        """
        abs_eta = np.fabs(parts['eta'])
        charged = (parts['charge'] != 0)
        dnch_deta = np.count_nonzero(charged & (abs_eta < .5)) / nsamples
        logging.info('dNch/deta = {0:.3f}'.format(dnch_deta))

    nfail = 0

    # run each initial condition event
    for n, ic in enumerate(initial_conditions, start=1):
        logging.info('starting event %d', n)

        try:
            run_single_event(ic)
        except StopEvent as e:
            logging.info('event stopped: %s', e)
        except Exception:
            logging.exception('event %d failed', n)
            nfail += 1
            if nfail > 3 and nfail/n > .5:
                logging.critical('too many failures, stopping events')
                break
            logging.warning('continuing to next event')
            continue

        logging.info('event %d completed successfully', n)

    # end of events: if running with a checkpoint, delete the file unless this
    # was a failed re-run of a checkpoint event
    if args.checkpoint is not None:
        if checkpoint_ic is not None and nfail > 0:
            logging.info(
                'checkpoint event failed, keeping file %s',
                args.checkpoint
            )
        else:
            os.remove(args.checkpoint)
            logging.info('removed checkpoint file %s', args.checkpoint)

    return n > nfail


def main():
    args, checkpoint_ic = parse_args_checkpoint()

    if checkpoint_ic is None:
        # starting fresh -> truncate output files
        filemode = 'w'

        # must handle rank first since it affects paths
        if args.rankvar:
            rank = os.getenv(args.rankvar)
            if rank is None:
                sys.exit('rank variable {} is not set'.format(args.rankvar))

            if args.rankfmt:
                rank = args.rankfmt.format(int(rank))

            # append rank to path arguments, e.g.:
            #   /path/to/output.log  ->  /path/to/output/<rank>.log
            for a in ['results', 'logfile', 'checkpoint']:
                value = getattr(args, a)
                if value is not None:
                    root, ext = os.path.splitext(value)
                    setattr(args, a, os.path.join(root, rank) + ext)
    else:
        # running checkpoint event -> append to existing files
        filemode = 'a'

    os.makedirs(os.path.dirname(args.results), exist_ok=True)

    if args.logfile is None:
        logfile_kwargs = dict(stream=sys.stdout)
    else:
        logfile_kwargs = dict(filename=args.logfile, filemode=filemode)
        os.makedirs(os.path.dirname(args.logfile), exist_ok=True)

    if args.checkpoint is not None:
        os.makedirs(os.path.dirname(args.checkpoint), exist_ok=True)

    logging.basicConfig(
        level=getattr(logging, args.loglevel.upper()),
        format='[%(levelname)s@%(relativeCreated)d] %(message)s',
        **logfile_kwargs
    )
    logging.captureWarnings(True)

    start = datetime.datetime.now()
    if checkpoint_ic is None:
        logging.info('started at %s', start)
        logging.info('arguments: %r', args)
    else:
        logging.info(
            'restarting from checkpoint file %s at %s',
            args.checkpoint, start
        )

    # translate SIGTERM to KeyboardInterrupt
    signal.signal(signal.SIGTERM, signal.default_int_handler)
    logging.debug('set SIGTERM handler')

    with \
            open(args.results, filemode + 'b',
                 buffering=args.buffering) as results_file, \
            tempfile.TemporaryDirectory(
                prefix='hic-', dir=args.tmpdir) as workdir:
        os.chdir(workdir)
        logging.info('working directory: %s', workdir)

        try:
            status = run_events(args, results_file, checkpoint_ic)
        except KeyboardInterrupt:
            # after catching the initial SIGTERM or interrupt, ignore them
            # during shutdown -- this ensures everything will exit gracefully
            # in case of additional signals (short of SIGKILL)
            signal.signal(signal.SIGTERM, signal.SIG_IGN)
            signal.signal(signal.SIGINT, signal.SIG_IGN)
            status = True
            logging.info(
                'interrupt or signal at %s, cleaning up...',
                datetime.datetime.now()
            )
            if args.checkpoint is not None:
                logging.info(
                    'current event saved in checkpoint file %s',
                    args.checkpoint
                )

    end = datetime.datetime.now()
    logging.info('finished at %s, %s elapsed', end, end - start)

    if not status:
        sys.exit(1)


if __name__ == "__main__":
    main()
